Terminals unused in grammar

    TRUE
    FALSE


State 44 conflicts: 3 shift/reduce, 1 reduce/reduce
State 55 conflicts: 3 shift/reduce, 6 reduce/reduce
State 64 conflicts: 3 shift/reduce, 1 reduce/reduce
State 66 conflicts: 2 shift/reduce
State 70 conflicts: 1 shift/reduce
State 74 conflicts: 3 shift/reduce, 1 reduce/reduce
State 75 conflicts: 3 shift/reduce, 1 reduce/reduce
State 82 conflicts: 3 shift/reduce, 7 reduce/reduce
State 89 conflicts: 3 shift/reduce, 12 reduce/reduce
State 93 conflicts: 3 shift/reduce
State 98 conflicts: 3 shift/reduce, 1 reduce/reduce
State 109 conflicts: 3 shift/reduce, 3 reduce/reduce
State 115 conflicts: 3 shift/reduce, 2 reduce/reduce
State 120 conflicts: 3 shift/reduce, 1 reduce/reduce
State 132 conflicts: 3 shift/reduce, 2 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions

    2 functions: function functions
    3          | %empty

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    5 param_declarations: param_declaration SEMICOLON param_declarations
    6                   | %empty

    7 param_declaration: identifiers COLON INTEGER int_declaration
    8                  | identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    9 local_declarations: local_declaration SEMICOLON local_declarations
   10                   | %empty

   11 local_declaration: identifiers COLON INTEGER int_declaration
   12                  | identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

   13 statements: statement SEMICOLON statements
   14           | %empty

   15 statement: int_var ASSIGN expression
   16          | arr_var ASSIGN expression
   17          | IF bool_exp THEN statements ENDIF
   18          | IF bool_exp THEN statements ELSE statements ENDIF

   19 $@1: %empty

   20 statement: WHILE bool_exp BEGINLOOP $@1 statements ENDLOOP

   21 $@2: %empty

   22 statement: DO BEGINLOOP $@2 statements ENDLOOP WHILE bool_exp
   23          | READ read_var
   24          | WRITE write_var
   25          | CONTINUE
   26          | BREAK
   27          | RETURN expression

   28 read_var: int_var
   29         | arr_var

   30 write_var: int_var
   31          | arr_var

   32 bool_exp: nots expression comp expression
   33         | nots L_PAREN expression comp expression R_PAREN

   34 nots: NOT nots
   35     | %empty

   36 comp: EQ
   37     | NEQ
   38     | LT
   39     | GT
   40     | LTE
   41     | GTE

   42 expression: multiplicative_expr additive expression
   43           | %empty

   44 multiplicative_expr: term multiplicative multiplicative_expr
   45                    | %empty

   46 additive: ADD
   47         | SUB
   48         | %empty

   49 multiplicative: MULT
   50               | DIV
   51               | MOD
   52               | %empty

   53 term: int_var
   54     | arr_var
   55     | numbers
   56     | L_PAREN expression R_PAREN
   57     | identifiers L_PAREN func_use parameters R_PAREN

   58 int_var: identifiers int_use

   59 arr_var: identifiers L_SQUARE_BRACKET arr_use expression R_SQUARE_BRACKET

   60 parameters: expression parameter

   61 parameter: COMMA expression parameter
   62          | %empty

   63 identifiers: IDENT

   64 numbers: NUMBER

   65 int_declaration: %empty

   66 arr_declaration: %empty

   67 func_declaration: %empty

   68 int_use: %empty

   69 arr_use: %empty

   70 func_use: %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    FUNCTION (258) 4
    BEGIN_PARAMS (259) 4
    END_PARAMS (260) 4
    BEGIN_LOCALS (261) 4
    END_LOCALS (262) 4
    BEGIN_BODY (263) 4
    END_BODY (264) 4
    INTEGER (265) 7 8 11 12
    ARRAY (266) 8 12
    OF (267) 8 12
    IF (268) 17 18
    THEN (269) 17 18
    ENDIF (270) 17 18
    ELSE (271) 18
    WHILE (272) 20 22
    DO (273) 22
    BEGINLOOP (274) 20 22
    ENDLOOP (275) 20 22
    CONTINUE (276) 25
    BREAK (277) 26
    READ (278) 23
    WRITE (279) 24
    NOT (280) 34
    TRUE (281)
    FALSE (282)
    RETURN (283) 27
    SUB (284) 47
    ADD (285) 46
    MULT (286) 49
    DIV (287) 50
    MOD (288) 51
    EQ (289) 36
    NEQ (290) 37
    LT (291) 38
    GT (292) 39
    LTE (293) 40
    GTE (294) 41
    SEMICOLON (295) 4 5 9 13
    COLON (296) 7 8 11 12
    COMMA (297) 61
    L_PAREN (298) 33 56 57
    R_PAREN (299) 33 56 57
    L_SQUARE_BRACKET (300) 8 12 59
    R_SQUARE_BRACKET (301) 8 12 59
    ASSIGN (302) 15 16
    NUMBER <num> (303) 64
    IDENT <id> (304) 63


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    prog_start <node> (51)
        on left: 1
        on right: 0
    functions <node> (52)
        on left: 2 3
        on right: 1 2
    function <node> (53)
        on left: 4
        on right: 2
    param_declarations <node> (54)
        on left: 5 6
        on right: 4 5
    param_declaration <node> (55)
        on left: 7 8
        on right: 5
    local_declarations <node> (56)
        on left: 9 10
        on right: 4 9
    local_declaration <node> (57)
        on left: 11 12
        on right: 9
    statements <node> (58)
        on left: 13 14
        on right: 4 13 17 18 20 22
    statement <node> (59)
        on left: 15 16 17 18 20 22 23 24 25 26 27
        on right: 13
    $@1 (60)
        on left: 19
        on right: 20
    $@2 (61)
        on left: 21
        on right: 22
    read_var <node> (62)
        on left: 28 29
        on right: 23
    write_var <node> (63)
        on left: 30 31
        on right: 24
    bool_exp <node> (64)
        on left: 32 33
        on right: 17 18 20 22
    nots <node> (65)
        on left: 34 35
        on right: 32 33 34
    comp <node> (66)
        on left: 36 37 38 39 40 41
        on right: 32 33
    expression <node> (67)
        on left: 42 43
        on right: 15 16 27 32 33 42 56 59 60 61
    multiplicative_expr <node> (68)
        on left: 44 45
        on right: 42 44
    additive <node> (69)
        on left: 46 47 48
        on right: 42
    multiplicative <node> (70)
        on left: 49 50 51 52
        on right: 44
    term <node> (71)
        on left: 53 54 55 56 57
        on right: 44
    int_var <node> (72)
        on left: 58
        on right: 15 28 30 53
    arr_var <node> (73)
        on left: 59
        on right: 16 29 31 54
    parameters <node> (74)
        on left: 60
        on right: 57
    parameter <node> (75)
        on left: 61 62
        on right: 60 61
    identifiers <node> (76)
        on left: 63
        on right: 4 7 8 11 12 57 58 59
    numbers <node> (77)
        on left: 64
        on right: 8 12 55
    int_declaration (78)
        on left: 65
        on right: 7 11
    arr_declaration (79)
        on left: 66
        on right: 8 12
    func_declaration (80)
        on left: 67
        on right: 4
    int_use (81)
        on left: 68
        on right: 58
    arr_use (82)
        on left: 69
        on right: 59
    func_use (83)
        on left: 70
        on right: 57


State 0

    0 $accept: . prog_start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    4 function: FUNCTION . identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 5

    identifiers  go to state 6


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 7


State 3

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 4

    2 functions: function . functions

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 8
    function   go to state 4


State 5

   63 identifiers: IDENT .

    $default  reduce using rule 63 (identifiers)


State 6

    4 function: FUNCTION identifiers . func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    $default  reduce using rule 67 (func_declaration)

    func_declaration  go to state 9


State 7

    0 $accept: prog_start $end .

    $default  accept


State 8

    2 functions: function functions .

    $default  reduce using rule 2 (functions)


State 9

    4 function: FUNCTION identifiers func_declaration . SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    SEMICOLON  shift, and go to state 10


State 10

    4 function: FUNCTION identifiers func_declaration SEMICOLON . BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_PARAMS  shift, and go to state 11


State 11

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS . param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 5

    $default  reduce using rule 6 (param_declarations)

    param_declarations  go to state 12
    param_declaration   go to state 13
    identifiers         go to state 14


State 12

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations . END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    END_PARAMS  shift, and go to state 15


State 13

    5 param_declarations: param_declaration . SEMICOLON param_declarations

    SEMICOLON  shift, and go to state 16


State 14

    7 param_declaration: identifiers . COLON INTEGER int_declaration
    8                  | identifiers . COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    COLON  shift, and go to state 17


State 15

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS . BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_LOCALS  shift, and go to state 18


State 16

    5 param_declarations: param_declaration SEMICOLON . param_declarations

    IDENT  shift, and go to state 5

    $default  reduce using rule 6 (param_declarations)

    param_declarations  go to state 19
    param_declaration   go to state 13
    identifiers         go to state 14


State 17

    7 param_declaration: identifiers COLON . INTEGER int_declaration
    8                  | identifiers COLON . ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    INTEGER  shift, and go to state 20
    ARRAY    shift, and go to state 21


State 18

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS . local_declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 5

    $default  reduce using rule 10 (local_declarations)

    local_declarations  go to state 22
    local_declaration   go to state 23
    identifiers         go to state 24


State 19

    5 param_declarations: param_declaration SEMICOLON param_declarations .

    $default  reduce using rule 5 (param_declarations)


State 20

    7 param_declaration: identifiers COLON INTEGER . int_declaration

    $default  reduce using rule 65 (int_declaration)

    int_declaration  go to state 25


State 21

    8 param_declaration: identifiers COLON ARRAY . arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    $default  reduce using rule 66 (arr_declaration)

    arr_declaration  go to state 26


State 22

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations . END_LOCALS BEGIN_BODY statements END_BODY

    END_LOCALS  shift, and go to state 27


State 23

    9 local_declarations: local_declaration . SEMICOLON local_declarations

    SEMICOLON  shift, and go to state 28


State 24

   11 local_declaration: identifiers . COLON INTEGER int_declaration
   12                  | identifiers . COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    COLON  shift, and go to state 29


State 25

    7 param_declaration: identifiers COLON INTEGER int_declaration .

    $default  reduce using rule 7 (param_declaration)


State 26

    8 param_declaration: identifiers COLON ARRAY arr_declaration . L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 30


State 27

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 31


State 28

    9 local_declarations: local_declaration SEMICOLON . local_declarations

    IDENT  shift, and go to state 5

    $default  reduce using rule 10 (local_declarations)

    local_declarations  go to state 32
    local_declaration   go to state 23
    identifiers         go to state 24


State 29

   11 local_declaration: identifiers COLON . INTEGER int_declaration
   12                  | identifiers COLON . ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    INTEGER  shift, and go to state 33
    ARRAY    shift, and go to state 34


State 30

    8 param_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET . numbers R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 35

    numbers  go to state 36


State 31

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY . statements END_BODY

    IF        shift, and go to state 37
    WHILE     shift, and go to state 38
    DO        shift, and go to state 39
    CONTINUE  shift, and go to state 40
    BREAK     shift, and go to state 41
    READ      shift, and go to state 42
    WRITE     shift, and go to state 43
    RETURN    shift, and go to state 44
    IDENT     shift, and go to state 5

    $default  reduce using rule 14 (statements)

    statements   go to state 45
    statement    go to state 46
    int_var      go to state 47
    arr_var      go to state 48
    identifiers  go to state 49


State 32

    9 local_declarations: local_declaration SEMICOLON local_declarations .

    $default  reduce using rule 9 (local_declarations)


State 33

   11 local_declaration: identifiers COLON INTEGER . int_declaration

    $default  reduce using rule 65 (int_declaration)

    int_declaration  go to state 50


State 34

   12 local_declaration: identifiers COLON ARRAY . arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    $default  reduce using rule 66 (arr_declaration)

    arr_declaration  go to state 51


State 35

   64 numbers: NUMBER .

    $default  reduce using rule 64 (numbers)


State 36

    8 param_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 52


State 37

   17 statement: IF . bool_exp THEN statements ENDIF
   18          | IF . bool_exp THEN statements ELSE statements ENDIF

    NOT  shift, and go to state 53

    $default  reduce using rule 35 (nots)

    bool_exp  go to state 54
    nots      go to state 55


State 38

   20 statement: WHILE . bool_exp BEGINLOOP $@1 statements ENDLOOP

    NOT  shift, and go to state 53

    $default  reduce using rule 35 (nots)

    bool_exp  go to state 56
    nots      go to state 55


State 39

   22 statement: DO . BEGINLOOP $@2 statements ENDLOOP WHILE bool_exp

    BEGINLOOP  shift, and go to state 57


State 40

   25 statement: CONTINUE .

    $default  reduce using rule 25 (statement)


State 41

   26 statement: BREAK .

    $default  reduce using rule 26 (statement)


State 42

   23 statement: READ . read_var

    IDENT  shift, and go to state 5

    read_var     go to state 58
    int_var      go to state 59
    arr_var      go to state 60
    identifiers  go to state 49


State 43

   24 statement: WRITE . write_var

    IDENT  shift, and go to state 5

    write_var    go to state 61
    int_var      go to state 62
    arr_var      go to state 63
    identifiers  go to state 49


State 44

   27 statement: RETURN . expression

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    SEMICOLON  reduce using rule 43 (expression)
    SEMICOLON  [reduce using rule 45 (multiplicative_expr)]
    L_PAREN    [reduce using rule 45 (multiplicative_expr)]
    NUMBER     [reduce using rule 45 (multiplicative_expr)]
    IDENT      [reduce using rule 45 (multiplicative_expr)]
    $default   reduce using rule 45 (multiplicative_expr)

    expression           go to state 65
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 45

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 72


State 46

   13 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 73


State 47

   15 statement: int_var . ASSIGN expression

    ASSIGN  shift, and go to state 74


State 48

   16 statement: arr_var . ASSIGN expression

    ASSIGN  shift, and go to state 75


State 49

   58 int_var: identifiers . int_use
   59 arr_var: identifiers . L_SQUARE_BRACKET arr_use expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 76

    $default  reduce using rule 68 (int_use)

    int_use  go to state 77


State 50

   11 local_declaration: identifiers COLON INTEGER int_declaration .

    $default  reduce using rule 11 (local_declaration)


State 51

   12 local_declaration: identifiers COLON ARRAY arr_declaration . L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 78


State 52

    8 param_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 79


State 53

   34 nots: NOT . nots

    NOT  shift, and go to state 53

    $default  reduce using rule 35 (nots)

    nots  go to state 80


State 54

   17 statement: IF bool_exp . THEN statements ENDIF
   18          | IF bool_exp . THEN statements ELSE statements ENDIF

    THEN  shift, and go to state 81


State 55

   32 bool_exp: nots . expression comp expression
   33         | nots . L_PAREN expression comp expression R_PAREN

    L_PAREN  shift, and go to state 82
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    SUB       reduce using rule 45 (multiplicative_expr)
    ADD       reduce using rule 45 (multiplicative_expr)
    EQ        reduce using rule 43 (expression)
    EQ        [reduce using rule 45 (multiplicative_expr)]
    NEQ       reduce using rule 43 (expression)
    NEQ       [reduce using rule 45 (multiplicative_expr)]
    LT        reduce using rule 43 (expression)
    LT        [reduce using rule 45 (multiplicative_expr)]
    GT        reduce using rule 43 (expression)
    GT        [reduce using rule 45 (multiplicative_expr)]
    LTE       reduce using rule 43 (expression)
    LTE       [reduce using rule 45 (multiplicative_expr)]
    GTE       reduce using rule 43 (expression)
    GTE       [reduce using rule 45 (multiplicative_expr)]
    L_PAREN   [reduce using rule 45 (multiplicative_expr)]
    NUMBER    [reduce using rule 45 (multiplicative_expr)]
    IDENT     [reduce using rule 45 (multiplicative_expr)]
    $default  reduce using rule 43 (expression)

    expression           go to state 83
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 56

   20 statement: WHILE bool_exp . BEGINLOOP $@1 statements ENDLOOP

    BEGINLOOP  shift, and go to state 84


State 57

   22 statement: DO BEGINLOOP . $@2 statements ENDLOOP WHILE bool_exp

    $default  reduce using rule 21 ($@2)

    $@2  go to state 85


State 58

   23 statement: READ read_var .

    $default  reduce using rule 23 (statement)


State 59

   28 read_var: int_var .

    $default  reduce using rule 28 (read_var)


State 60

   29 read_var: arr_var .

    $default  reduce using rule 29 (read_var)


State 61

   24 statement: WRITE write_var .

    $default  reduce using rule 24 (statement)


State 62

   30 write_var: int_var .

    $default  reduce using rule 30 (write_var)


State 63

   31 write_var: arr_var .

    $default  reduce using rule 31 (write_var)


State 64

   56 term: L_PAREN . expression R_PAREN

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    L_PAREN   [reduce using rule 45 (multiplicative_expr)]
    R_PAREN   reduce using rule 43 (expression)
    R_PAREN   [reduce using rule 45 (multiplicative_expr)]
    NUMBER    [reduce using rule 45 (multiplicative_expr)]
    IDENT     [reduce using rule 45 (multiplicative_expr)]
    $default  reduce using rule 45 (multiplicative_expr)

    expression           go to state 86
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 65

   27 statement: RETURN expression .

    $default  reduce using rule 27 (statement)


State 66

   42 expression: multiplicative_expr . additive expression

    SUB  shift, and go to state 87
    ADD  shift, and go to state 88

    SUB       [reduce using rule 48 (additive)]
    ADD       [reduce using rule 48 (additive)]
    $default  reduce using rule 48 (additive)

    additive  go to state 89


State 67

   44 multiplicative_expr: term . multiplicative multiplicative_expr

    MULT  shift, and go to state 90
    DIV   shift, and go to state 91
    MOD   shift, and go to state 92

    $default  reduce using rule 52 (multiplicative)

    multiplicative  go to state 93


State 68

   53 term: int_var .

    $default  reduce using rule 53 (term)


State 69

   54 term: arr_var .

    $default  reduce using rule 54 (term)


State 70

   57 term: identifiers . L_PAREN func_use parameters R_PAREN
   58 int_var: identifiers . int_use
   59 arr_var: identifiers . L_SQUARE_BRACKET arr_use expression R_SQUARE_BRACKET

    L_PAREN           shift, and go to state 94
    L_SQUARE_BRACKET  shift, and go to state 76

    L_PAREN   [reduce using rule 68 (int_use)]
    $default  reduce using rule 68 (int_use)

    int_use  go to state 77


State 71

   55 term: numbers .

    $default  reduce using rule 55 (term)


State 72

    4 function: FUNCTION identifiers func_declaration SEMICOLON BEGIN_PARAMS param_declarations END_PARAMS BEGIN_LOCALS local_declarations END_LOCALS BEGIN_BODY statements END_BODY .

    $default  reduce using rule 4 (function)


State 73

   13 statements: statement SEMICOLON . statements

    IF        shift, and go to state 37
    WHILE     shift, and go to state 38
    DO        shift, and go to state 39
    CONTINUE  shift, and go to state 40
    BREAK     shift, and go to state 41
    READ      shift, and go to state 42
    WRITE     shift, and go to state 43
    RETURN    shift, and go to state 44
    IDENT     shift, and go to state 5

    $default  reduce using rule 14 (statements)

    statements   go to state 95
    statement    go to state 46
    int_var      go to state 47
    arr_var      go to state 48
    identifiers  go to state 49


State 74

   15 statement: int_var ASSIGN . expression

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    SEMICOLON  reduce using rule 43 (expression)
    SEMICOLON  [reduce using rule 45 (multiplicative_expr)]
    L_PAREN    [reduce using rule 45 (multiplicative_expr)]
    NUMBER     [reduce using rule 45 (multiplicative_expr)]
    IDENT      [reduce using rule 45 (multiplicative_expr)]
    $default   reduce using rule 45 (multiplicative_expr)

    expression           go to state 96
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 75

   16 statement: arr_var ASSIGN . expression

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    SEMICOLON  reduce using rule 43 (expression)
    SEMICOLON  [reduce using rule 45 (multiplicative_expr)]
    L_PAREN    [reduce using rule 45 (multiplicative_expr)]
    NUMBER     [reduce using rule 45 (multiplicative_expr)]
    IDENT      [reduce using rule 45 (multiplicative_expr)]
    $default   reduce using rule 45 (multiplicative_expr)

    expression           go to state 97
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 76

   59 arr_var: identifiers L_SQUARE_BRACKET . arr_use expression R_SQUARE_BRACKET

    $default  reduce using rule 69 (arr_use)

    arr_use  go to state 98


State 77

   58 int_var: identifiers int_use .

    $default  reduce using rule 58 (int_var)


State 78

   12 local_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET . numbers R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 35

    numbers  go to state 99


State 79

    8 param_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 100


State 80

   34 nots: NOT nots .

    $default  reduce using rule 34 (nots)


State 81

   17 statement: IF bool_exp THEN . statements ENDIF
   18          | IF bool_exp THEN . statements ELSE statements ENDIF

    IF        shift, and go to state 37
    WHILE     shift, and go to state 38
    DO        shift, and go to state 39
    CONTINUE  shift, and go to state 40
    BREAK     shift, and go to state 41
    READ      shift, and go to state 42
    WRITE     shift, and go to state 43
    RETURN    shift, and go to state 44
    IDENT     shift, and go to state 5

    $default  reduce using rule 14 (statements)

    statements   go to state 101
    statement    go to state 46
    int_var      go to state 47
    arr_var      go to state 48
    identifiers  go to state 49


State 82

   33 bool_exp: nots L_PAREN . expression comp expression R_PAREN
   56 term: L_PAREN . expression R_PAREN

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    SUB       reduce using rule 45 (multiplicative_expr)
    ADD       reduce using rule 45 (multiplicative_expr)
    EQ        reduce using rule 43 (expression)
    EQ        [reduce using rule 45 (multiplicative_expr)]
    NEQ       reduce using rule 43 (expression)
    NEQ       [reduce using rule 45 (multiplicative_expr)]
    LT        reduce using rule 43 (expression)
    LT        [reduce using rule 45 (multiplicative_expr)]
    GT        reduce using rule 43 (expression)
    GT        [reduce using rule 45 (multiplicative_expr)]
    LTE       reduce using rule 43 (expression)
    LTE       [reduce using rule 45 (multiplicative_expr)]
    GTE       reduce using rule 43 (expression)
    GTE       [reduce using rule 45 (multiplicative_expr)]
    L_PAREN   [reduce using rule 45 (multiplicative_expr)]
    R_PAREN   reduce using rule 43 (expression)
    R_PAREN   [reduce using rule 45 (multiplicative_expr)]
    NUMBER    [reduce using rule 45 (multiplicative_expr)]
    IDENT     [reduce using rule 45 (multiplicative_expr)]
    $default  reduce using rule 43 (expression)

    expression           go to state 102
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 83

   32 bool_exp: nots expression . comp expression

    EQ   shift, and go to state 103
    NEQ  shift, and go to state 104
    LT   shift, and go to state 105
    GT   shift, and go to state 106
    LTE  shift, and go to state 107
    GTE  shift, and go to state 108

    comp  go to state 109


State 84

   20 statement: WHILE bool_exp BEGINLOOP . $@1 statements ENDLOOP

    $default  reduce using rule 19 ($@1)

    $@1  go to state 110


State 85

   22 statement: DO BEGINLOOP $@2 . statements ENDLOOP WHILE bool_exp

    IF        shift, and go to state 37
    WHILE     shift, and go to state 38
    DO        shift, and go to state 39
    CONTINUE  shift, and go to state 40
    BREAK     shift, and go to state 41
    READ      shift, and go to state 42
    WRITE     shift, and go to state 43
    RETURN    shift, and go to state 44
    IDENT     shift, and go to state 5

    $default  reduce using rule 14 (statements)

    statements   go to state 111
    statement    go to state 46
    int_var      go to state 47
    arr_var      go to state 48
    identifiers  go to state 49


State 86

   56 term: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 112


State 87

   47 additive: SUB .

    $default  reduce using rule 47 (additive)


State 88

   46 additive: ADD .

    $default  reduce using rule 46 (additive)


State 89

   42 expression: multiplicative_expr additive . expression

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    THEN              reduce using rule 43 (expression)
    THEN              [reduce using rule 45 (multiplicative_expr)]
    BEGINLOOP         reduce using rule 43 (expression)
    BEGINLOOP         [reduce using rule 45 (multiplicative_expr)]
    SUB               reduce using rule 45 (multiplicative_expr)
    ADD               reduce using rule 45 (multiplicative_expr)
    EQ                reduce using rule 43 (expression)
    EQ                [reduce using rule 45 (multiplicative_expr)]
    NEQ               reduce using rule 43 (expression)
    NEQ               [reduce using rule 45 (multiplicative_expr)]
    LT                reduce using rule 43 (expression)
    LT                [reduce using rule 45 (multiplicative_expr)]
    GT                reduce using rule 43 (expression)
    GT                [reduce using rule 45 (multiplicative_expr)]
    LTE               reduce using rule 43 (expression)
    LTE               [reduce using rule 45 (multiplicative_expr)]
    GTE               reduce using rule 43 (expression)
    GTE               [reduce using rule 45 (multiplicative_expr)]
    SEMICOLON         reduce using rule 43 (expression)
    SEMICOLON         [reduce using rule 45 (multiplicative_expr)]
    COMMA             reduce using rule 43 (expression)
    COMMA             [reduce using rule 45 (multiplicative_expr)]
    L_PAREN           [reduce using rule 45 (multiplicative_expr)]
    R_PAREN           reduce using rule 43 (expression)
    R_PAREN           [reduce using rule 45 (multiplicative_expr)]
    R_SQUARE_BRACKET  reduce using rule 43 (expression)
    R_SQUARE_BRACKET  [reduce using rule 45 (multiplicative_expr)]
    NUMBER            [reduce using rule 45 (multiplicative_expr)]
    IDENT             [reduce using rule 45 (multiplicative_expr)]
    $default          reduce using rule 43 (expression)

    expression           go to state 113
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 90

   49 multiplicative: MULT .

    $default  reduce using rule 49 (multiplicative)


State 91

   50 multiplicative: DIV .

    $default  reduce using rule 50 (multiplicative)


State 92

   51 multiplicative: MOD .

    $default  reduce using rule 51 (multiplicative)


State 93

   44 multiplicative_expr: term multiplicative . multiplicative_expr

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    L_PAREN   [reduce using rule 45 (multiplicative_expr)]
    NUMBER    [reduce using rule 45 (multiplicative_expr)]
    IDENT     [reduce using rule 45 (multiplicative_expr)]
    $default  reduce using rule 45 (multiplicative_expr)

    multiplicative_expr  go to state 114
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 94

   57 term: identifiers L_PAREN . func_use parameters R_PAREN

    $default  reduce using rule 70 (func_use)

    func_use  go to state 115


State 95

   13 statements: statement SEMICOLON statements .

    $default  reduce using rule 13 (statements)


State 96

   15 statement: int_var ASSIGN expression .

    $default  reduce using rule 15 (statement)


State 97

   16 statement: arr_var ASSIGN expression .

    $default  reduce using rule 16 (statement)


State 98

   59 arr_var: identifiers L_SQUARE_BRACKET arr_use . expression R_SQUARE_BRACKET

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    L_PAREN           [reduce using rule 45 (multiplicative_expr)]
    R_SQUARE_BRACKET  reduce using rule 43 (expression)
    R_SQUARE_BRACKET  [reduce using rule 45 (multiplicative_expr)]
    NUMBER            [reduce using rule 45 (multiplicative_expr)]
    IDENT             [reduce using rule 45 (multiplicative_expr)]
    $default          reduce using rule 45 (multiplicative_expr)

    expression           go to state 116
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 99

   12 local_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 117


State 100

    8 param_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 8 (param_declaration)


State 101

   17 statement: IF bool_exp THEN statements . ENDIF
   18          | IF bool_exp THEN statements . ELSE statements ENDIF

    ENDIF  shift, and go to state 118
    ELSE   shift, and go to state 119


State 102

   33 bool_exp: nots L_PAREN expression . comp expression R_PAREN
   56 term: L_PAREN expression . R_PAREN

    EQ       shift, and go to state 103
    NEQ      shift, and go to state 104
    LT       shift, and go to state 105
    GT       shift, and go to state 106
    LTE      shift, and go to state 107
    GTE      shift, and go to state 108
    R_PAREN  shift, and go to state 112

    comp  go to state 120


State 103

   36 comp: EQ .

    $default  reduce using rule 36 (comp)


State 104

   37 comp: NEQ .

    $default  reduce using rule 37 (comp)


State 105

   38 comp: LT .

    $default  reduce using rule 38 (comp)


State 106

   39 comp: GT .

    $default  reduce using rule 39 (comp)


State 107

   40 comp: LTE .

    $default  reduce using rule 40 (comp)


State 108

   41 comp: GTE .

    $default  reduce using rule 41 (comp)


State 109

   32 bool_exp: nots expression comp . expression

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    THEN       reduce using rule 43 (expression)
    THEN       [reduce using rule 45 (multiplicative_expr)]
    BEGINLOOP  reduce using rule 43 (expression)
    BEGINLOOP  [reduce using rule 45 (multiplicative_expr)]
    SUB        reduce using rule 45 (multiplicative_expr)
    ADD        reduce using rule 45 (multiplicative_expr)
    SEMICOLON  reduce using rule 43 (expression)
    SEMICOLON  [reduce using rule 45 (multiplicative_expr)]
    L_PAREN    [reduce using rule 45 (multiplicative_expr)]
    NUMBER     [reduce using rule 45 (multiplicative_expr)]
    IDENT      [reduce using rule 45 (multiplicative_expr)]
    $default   reduce using rule 43 (expression)

    expression           go to state 121
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 110

   20 statement: WHILE bool_exp BEGINLOOP $@1 . statements ENDLOOP

    IF        shift, and go to state 37
    WHILE     shift, and go to state 38
    DO        shift, and go to state 39
    CONTINUE  shift, and go to state 40
    BREAK     shift, and go to state 41
    READ      shift, and go to state 42
    WRITE     shift, and go to state 43
    RETURN    shift, and go to state 44
    IDENT     shift, and go to state 5

    $default  reduce using rule 14 (statements)

    statements   go to state 122
    statement    go to state 46
    int_var      go to state 47
    arr_var      go to state 48
    identifiers  go to state 49


State 111

   22 statement: DO BEGINLOOP $@2 statements . ENDLOOP WHILE bool_exp

    ENDLOOP  shift, and go to state 123


State 112

   56 term: L_PAREN expression R_PAREN .

    $default  reduce using rule 56 (term)


State 113

   42 expression: multiplicative_expr additive expression .

    $default  reduce using rule 42 (expression)


State 114

   44 multiplicative_expr: term multiplicative multiplicative_expr .

    $default  reduce using rule 44 (multiplicative_expr)


State 115

   57 term: identifiers L_PAREN func_use . parameters R_PAREN

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    SUB       reduce using rule 45 (multiplicative_expr)
    ADD       reduce using rule 45 (multiplicative_expr)
    COMMA     reduce using rule 43 (expression)
    COMMA     [reduce using rule 45 (multiplicative_expr)]
    L_PAREN   [reduce using rule 45 (multiplicative_expr)]
    R_PAREN   reduce using rule 43 (expression)
    R_PAREN   [reduce using rule 45 (multiplicative_expr)]
    NUMBER    [reduce using rule 45 (multiplicative_expr)]
    IDENT     [reduce using rule 45 (multiplicative_expr)]
    $default  reduce using rule 43 (expression)

    expression           go to state 124
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    parameters           go to state 125
    identifiers          go to state 70
    numbers              go to state 71


State 116

   59 arr_var: identifiers L_SQUARE_BRACKET arr_use expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 126


State 117

   12 local_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 127


State 118

   17 statement: IF bool_exp THEN statements ENDIF .

    $default  reduce using rule 17 (statement)


State 119

   18 statement: IF bool_exp THEN statements ELSE . statements ENDIF

    IF        shift, and go to state 37
    WHILE     shift, and go to state 38
    DO        shift, and go to state 39
    CONTINUE  shift, and go to state 40
    BREAK     shift, and go to state 41
    READ      shift, and go to state 42
    WRITE     shift, and go to state 43
    RETURN    shift, and go to state 44
    IDENT     shift, and go to state 5

    $default  reduce using rule 14 (statements)

    statements   go to state 128
    statement    go to state 46
    int_var      go to state 47
    arr_var      go to state 48
    identifiers  go to state 49


State 120

   33 bool_exp: nots L_PAREN expression comp . expression R_PAREN

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    L_PAREN   [reduce using rule 45 (multiplicative_expr)]
    R_PAREN   reduce using rule 43 (expression)
    R_PAREN   [reduce using rule 45 (multiplicative_expr)]
    NUMBER    [reduce using rule 45 (multiplicative_expr)]
    IDENT     [reduce using rule 45 (multiplicative_expr)]
    $default  reduce using rule 45 (multiplicative_expr)

    expression           go to state 129
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 121

   32 bool_exp: nots expression comp expression .

    $default  reduce using rule 32 (bool_exp)


State 122

   20 statement: WHILE bool_exp BEGINLOOP $@1 statements . ENDLOOP

    ENDLOOP  shift, and go to state 130


State 123

   22 statement: DO BEGINLOOP $@2 statements ENDLOOP . WHILE bool_exp

    WHILE  shift, and go to state 131


State 124

   60 parameters: expression . parameter

    COMMA  shift, and go to state 132

    $default  reduce using rule 62 (parameter)

    parameter  go to state 133


State 125

   57 term: identifiers L_PAREN func_use parameters . R_PAREN

    R_PAREN  shift, and go to state 134


State 126

   59 arr_var: identifiers L_SQUARE_BRACKET arr_use expression R_SQUARE_BRACKET .

    $default  reduce using rule 59 (arr_var)


State 127

   12 local_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 135


State 128

   18 statement: IF bool_exp THEN statements ELSE statements . ENDIF

    ENDIF  shift, and go to state 136


State 129

   33 bool_exp: nots L_PAREN expression comp expression . R_PAREN

    R_PAREN  shift, and go to state 137


State 130

   20 statement: WHILE bool_exp BEGINLOOP $@1 statements ENDLOOP .

    $default  reduce using rule 20 (statement)


State 131

   22 statement: DO BEGINLOOP $@2 statements ENDLOOP WHILE . bool_exp

    NOT  shift, and go to state 53

    $default  reduce using rule 35 (nots)

    bool_exp  go to state 138
    nots      go to state 55


State 132

   61 parameter: COMMA . expression parameter

    L_PAREN  shift, and go to state 64
    NUMBER   shift, and go to state 35
    IDENT    shift, and go to state 5

    SUB       reduce using rule 45 (multiplicative_expr)
    ADD       reduce using rule 45 (multiplicative_expr)
    COMMA     reduce using rule 43 (expression)
    COMMA     [reduce using rule 45 (multiplicative_expr)]
    L_PAREN   [reduce using rule 45 (multiplicative_expr)]
    R_PAREN   reduce using rule 43 (expression)
    R_PAREN   [reduce using rule 45 (multiplicative_expr)]
    NUMBER    [reduce using rule 45 (multiplicative_expr)]
    IDENT     [reduce using rule 45 (multiplicative_expr)]
    $default  reduce using rule 43 (expression)

    expression           go to state 139
    multiplicative_expr  go to state 66
    term                 go to state 67
    int_var              go to state 68
    arr_var              go to state 69
    identifiers          go to state 70
    numbers              go to state 71


State 133

   60 parameters: expression parameter .

    $default  reduce using rule 60 (parameters)


State 134

   57 term: identifiers L_PAREN func_use parameters R_PAREN .

    $default  reduce using rule 57 (term)


State 135

   12 local_declaration: identifiers COLON ARRAY arr_declaration L_SQUARE_BRACKET numbers R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 12 (local_declaration)


State 136

   18 statement: IF bool_exp THEN statements ELSE statements ENDIF .

    $default  reduce using rule 18 (statement)


State 137

   33 bool_exp: nots L_PAREN expression comp expression R_PAREN .

    $default  reduce using rule 33 (bool_exp)


State 138

   22 statement: DO BEGINLOOP $@2 statements ENDLOOP WHILE bool_exp .

    $default  reduce using rule 22 (statement)


State 139

   61 parameter: COMMA expression . parameter

    COMMA  shift, and go to state 132

    $default  reduce using rule 62 (parameter)

    parameter  go to state 140


State 140

   61 parameter: COMMA expression parameter .

    $default  reduce using rule 61 (parameter)
